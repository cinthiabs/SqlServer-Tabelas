CREATE TABLE ALUNOS
(MATRICULA INT IDENTITY,
NOME VARCHAR(40) NOT NULL,
CURSO INT NOT NULL,
PERIODO VARCHAR(20) NOT NULL,
SEMESTRE INT NOT NULL,
CONSTRAINT PK_MATRICULA PRIMARY KEY(MATRICULA),
CONSTRAINT FK_CURSO FOREIGN KEY (CURSO) REFERENCES CURSOS (CODCURSO));

CREATE TABLE CURSOS
(CODCURSO INT IDENTITY,
DESCRICAO VARCHAR(30) NOT NULL,
CONSTRAINT PK_CODCURSO PRIMARY KEY(CODCURSO));

CREATE TABLE DISCIPLINA
(CODIGO INT IDENTITY,
DESCRICAO VARCHAR(20)NOT NULL,
CONSTRAINT PK_CODIGO PRIMARY KEY(CODIGO));

CREATE TABLE NOTAS
(MATRICULA INT NOT NULL,
DISCIPLINA INT NOT NULL,
NOTAP1 NUMERIC(7,2)NOT NULL,
NOTAP2 NUMERIC(7,2)NOT NULL,
NOTAP3 NUMERIC(7,2)NOT NULL,
CONSTRAINT FK_MATRICULA FOREIGN KEY (MATRICULA) REFERENCES ALUNOS (MATRICULA),
CONSTRAINT FK_DISCIPLINA FOREIGN KEY (DISCIPLINA) REFERENCES DISCIPLINA (CODIGO));

SELECT*FROM ALUNOS
SELECT*FROM CURSOS
SELECT*FROM DISCIPLINA
SELECT*FROM NOTAS

INSERT INTO CURSOS VALUES
('INFORMATICA PARA NEGOCIOS'),
('FABRICAÇÃO MECANICA'),
('LOGISTICA'),
('POLIMEROS'),
('GESTÃO EMPRESARIAL');

INSERT INTO DISCIPLINA VALUES
('ESTRUTURA DE DADOS'),
('CALCULO'),
('GESTÃO DE EQUIPES'),
('PRODUÇÃO'),
('ADMINISTRAÇÃO');

INSERT INTO ALUNOS VALUES 
('CINTHIA',1, 'MATUTINO', 3),
('JOAO',2, 'VESPERTINO',2),
('JOANA',3, 'NOTURNO',4),
('SAMUEL',4,'MATUTINO',1),
('AMANDA',5,'NOTURNO',5);

INSERT INTO NOTAS VALUES
(1,1, 9.1, 10.0, 0.0),
(2,2, 8.2, 7.0, 0.0),
(3,3, 9.2, 8.0, 0.0),
(4,4, 3.1, 3.0, 8.1),
(5,5, 8.2, 10.0, 0.0);

--c) Listar todos os alunos com o nome iniciado pela letra ‘A’.
SELECT * FROM ALUNOS WHERE NOME LIKE 'A%';

--d) Quantos alunos do período vespertino temos no cadastro?
SELECT COUNT(ALUNOS.PERIODO)AS 'VESPERTINO'FROM ALUNOS  WHERE ALUNOS.PERIODO= 'VESPERTINO';

--e) Quantos alunos temos no curso de Tecnologia em Informática e Negócios?
SELECT COUNT(ALUNOS.CURSO)AS'INFORMATICA PARA NEGOCIOS'FROM ALUNOS INNER JOIN CURSOS
ON ALUNOS.CURSO = CURSOS.CODCURSO WHERE CURSOS.DESCRICAO='INFORMATICA PARA NEGOCIOS';

--f) Listar matrícula do aluno, nome, curso (por extenso), período e semestre.
SELECT ALUNOS.MATRICULA, ALUNOS.NOME, ALUNOS.CURSO, ALUNOS.PERIODO, ALUNOS.SEMESTRE
FROM ALUNOS INNER JOIN CURSOS
ON ALUNOS.CURSO = CURSOS.CODCURSO;

--g) Listar matrícula do aluno, nome, período e semestre todos os alunos do curso de Tecnologia em Informática e Negócios
SELECT ALUNOS.MATRICULA, ALUNOS.NOME, ALUNOS.PERIODO, ALUNOS.SEMESTRE, CURSOS.DESCRICAO
FROM ALUNOS INNER JOIN CURSOS
ON ALUNOS.CURSO = CURSOS.CODCURSO WHERE CURSOS.DESCRICAO='INFORMACAO PARA NEGOCIOS';

--h)Quantos alunos temos no período Noturno, do curso de Logística?
SELECT COUNT(ALUNOS.CURSO)AS'LOGISTICA'FROM ALUNOS INNER JOIN CURSOS
ON ALUNOS.CURSO = CURSOS.CODCURSO WHERE CURSOS.DESCRICAO='LOGISTICA';

--i)Listar Matricula do aluno, Nome do aluno, nome da disciplina e notas (P1 e P2)
SELECT ALUNOS.MATRICULA, ALUNOS.NOME, CURSOS.DESCRICAO, NOTAS.NOTAP1, NOTAS.NOTAP2
FROM ALUNOS INNER JOIN CURSOS ON ALUNOS.MATRICULA = CURSOS.CODCURSO
INNER JOIN NOTAS ON NOTAS.NOTAP1=NOTAS.NOTAP2;

--j) Listar todos os alunos (Matricula e Nome) que não fizeram P3.
SELECT ALUNOS.MATRICULA, ALUNOS.NOME FROM ALUNOS INNER JOIN NOTAS
ON ALUNOS.MATRICULA = NOTAS.MATRICULA WHERE NOTAS.NOTAP3 = NULL;

--k) Listar todos os alunos (Matricula e Nome) que fizeram P3.
SELECT ALUNOS.MATRICULA, ALUNOS.NOME FROM ALUNOS INNER JOIN NOTAS
ON ALUNOS.MATRICULA = NOTAS.MATRICULA WHERE NOTAS.NOTAP3>0;

--l) Qual a média das notas de P1 na disciplina Estrutura de dados?
SELECT AVG(NOTAS.NOTAP1)AS'MEDIA' FROM NOTAS;

--Listar todos os alunos (Matricula e Nome) que tiveram nota acima da média em Estrutura de dados.
SELECT ALUNOS.MATRICULA, ALUNOS.NOME, NOTAS.NOTAP1 FROM ALUNOS INNER JOIN NOTAS
ON ALUNOS.MATRICULA = NOTAS.MATRICULA WHERE NOTAS.NOTAP1>(SELECT AVG(NOTAS.NOTAP1)FROM NOTAS);

--Qual a menor nota (P2) em banco de dados?
SELECT ALUNOS.MATRICULA, ALUNOS.NOME, NOTAS.NOTAP2 FROM ALUNOS INNER JOIN NOTAS
ON ALUNOS.MATRICULA = NOTAS.MATRICULA WHERE NOTAS.NOTAP1=(SELECT MIN(NOTAS.NOTAP2)FROM NOTAS);

--o) Listar a quantidade de alunos por período.
SELECT COUNT(ALUNOS.PERIODO)AS'PERIODO' FROM ALUNOS GROUP BY PERIODO;

--p) Listar a quantidade de alunos por semestre.
SELECT COUNT(ALUNOS.SEMESTRE)AS'SEMESTRE' FROM ALUNOS GROUP BY SEMESTRE;
